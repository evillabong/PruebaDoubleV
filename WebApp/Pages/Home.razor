@page "/"
@using Common.Interfaces
@using WebApp.Security
@using WebApp.Views
@inject IWebClient client
@inject ICryptoService security
@inject IJSRuntime js
@inject IJwtSessionService session
<h3>Inicio de sesión</h3>

<EditForm Model="@loginModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    @* <ValidationSummary /> *@

    <div class="form-group">
        <label for="email">Usuario</label>
        <InputText id="email" class="form-control" @bind-Value="loginModel.Username" disable=@load />
        <ValidationMessage For="@(() => loginModel.Username)" />
    </div>

    <div class="form-group">
        <label for="password">Contraseña</label>
        <InputText Class="form-control" type="password" placeholder="Contraseña" @bind-Value="@loginModel.Password" disable=@load />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>
    @if (load)
    {
        <LoaderView></LoaderView>
    }
    <button type="submit" class="btn btn-primary" disable=@load>Iniciar sesión</button>
</EditForm>


@code {
    GetLoginParam loginModel = new GetLoginParam();
    bool load = false;
    private async Task HandleValidSubmit()
    {
        var responsePublicKey = await client.GetAsync<Common.Controllers.Security, GetPublicKeyResult>(Common.Controllers.Security.GetPublicKey);
        if (responsePublicKey.IsSuccess())
        {
            var aes_key = await security.GenerateAesRandomKeyAsync(Common.Constants.KEY_SIZE);
            var encryptedText = await security.EncryptRsaAsync(responsePublicKey.Value, aes_key);

            var response = await client.PostAsync<SecureParam, Common.Controllers.Security, GetLoginResult>(Common.Controllers.Security.GetLogin, new SecureParam
                {
                    Key = aes_key,
                    Data = encryptedText
                });

            if (response.IsSuccess())
            {
                await session.LoginAsync(response.Token);
                await js.SetItem("Name", response.Name);
                
                await js.InvokeVoidAsync("alert", "Inicio Sesión");
            }
            else
            {
                await js.InvokeVoidAsync("alert", response.Message);
            }
        }
        else
        {
            await js.InvokeVoidAsync("alert", responsePublicKey.Message);
        }



    }
}